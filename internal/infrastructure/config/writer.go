package config

import (
	"fmt"
	"os"
	"path/filepath"

	"gopkg.in/yaml.v3"
)

// Writer handles configuration file writing
type Writer struct {
	configPath string
}

// NewWriter creates a new configuration writer
func NewWriter(configPath string) *Writer {
	return &Writer{
		configPath: expandPath(configPath),
	}
}

// Write writes configuration to file
func (w *Writer) Write(cfg *Config) error {
	// Validate configuration before writing
	if err := cfg.Validate(); err != nil {
		return fmt.Errorf("invalid configuration: %w", err)
	}

	// Create directory if it doesn't exist
	dir := filepath.Dir(w.configPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("failed to create config directory: %w", err)
	}

	// Create backup if file exists
	if _, err := os.Stat(w.configPath); err == nil {
		backupPath := w.configPath + ".backup"
		if err := w.createBackup(backupPath); err != nil {
			return fmt.Errorf("failed to create backup: %w", err)
		}
	}

	// Write configuration
	file, err := os.Create(w.configPath)
	if err != nil {
		return fmt.Errorf("failed to create config file: %w", err)
	}
	defer file.Close()

	encoder := yaml.NewEncoder(file)
	encoder.SetIndent(2)

	if err := encoder.Encode(cfg); err != nil {
		return fmt.Errorf("failed to write config: %w", err)
	}

	return nil
}

// createBackup creates a backup of the existing configuration file
func (w *Writer) createBackup(backupPath string) error {
	src, err := os.Open(w.configPath)
	if err != nil {
		return err
	}
	defer src.Close()

	dst, err := os.Create(backupPath)
	if err != nil {
		return err
	}
	defer dst.Close()

	if _, err := dst.ReadFrom(src); err != nil {
		return err
	}

	return nil
}

// CreateDefaultConfig creates a default configuration file
func (w *Writer) CreateDefaultConfig() error {
	// Add helpful comments
	content := `# CLI-Recover Configuration File
# This file was generated by 'cli-recover init'

# Logger configuration
logger:
  level: info           # Log level: debug, info, warn, error, fatal
  output: console       # Output type: console, file, both
  file:
    path: ~/.cli-recover/logs/cli-recover.log
    maxSize: 100        # Maximum size in MB before rotation
    maxAge: 7           # Maximum age in days before deletion
    format: text        # Log format: text, json
  console:
    color: true         # Enable colored output

# Backup configuration
backup:
  defaultCompression: gzip    # Default compression: gzip, bzip2, xz, none
  excludeVCS: true           # Automatically exclude .git, .svn directories
  preservePermissions: true  # Preserve file permissions in backups
  defaultTimeout: 5m         # Default operation timeout

# Metadata storage configuration
metadata:
  path: ~/.cli-recover/metadata  # Path to store backup metadata
  format: json                   # Storage format: json, yaml
`

	// Create directory if it doesn't exist
	dir := filepath.Dir(w.configPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("failed to create config directory: %w", err)
	}

	// Write the config file with comments
	if err := os.WriteFile(w.configPath, []byte(content), 0644); err != nil {
		return fmt.Errorf("failed to write config file: %w", err)
	}

	return nil
}

// Exists checks if configuration file exists
func (w *Writer) Exists() bool {
	_, err := os.Stat(w.configPath)
	return err == nil
}
